Função que calcula o polinómio a no ponto x
    a <- Vetor com os valores do polinómio Ex: [1,23,-4] x^2 + 23x - 4
    x <- Ponto 
-horner(a,x)
Função do matlab com o mesmo comportamento que a horner
-Polyval(a,x)

Função que converte um número em binário para decimal
    binStr <- Número binário em string Ex: '10001'
-bin2dec(binStr)

Função que converte um número em hexadecimal para décimal
    hexStr <- Número hexadécimal
-hex2dec(hexStr)

Função que converte um número na base n para décimal
    baseStr <- String com o número em base
    n <- Base em que se encontra o número
-base2dec(baseStr,n)

Nota: Polyval e horner pode ser usada em vez das funções bin2dec, hex2dec, base2dec
basta entregar o número como vetor em a e a base como x
Nota: É possivel tambêm utilizar estas funções (horner e polyval) para representar números
fracionários na base de 2 em base de 10. Contudo é necessario dar flip aos bits, pois estas 
funções tratam os indices de forma decrescente, e no caso dos números fracionários 
temos de tratar de forma crescente. E a base b^-k trans forma em 1/k Ex: -2 = 1/2.
Ex: Para o número (0.100101) em base 2
horner([0,1,0,0,1,0,1],1/2) = Errado, mas horner([1,0,1,0,0,1,0],1/2) = Correto

Função que converte a representação decimal de um inteiro para binário
    N <- Número inteiro
-intdectobin(N)

Função que determina a representação binária de um número fracionário puro
    Dec <- número decimal facrionário
-fracdectobin(Dec)

Função que calcula a soma dos termos da série de potências de x para a função 
exponencial até encontrar um termo cujo valor absoluto é inferior a uma tolerância tol.
    x <- Potências de x (vetor)
    tol <- Tolerância tol (valor absoluto menor que tol)
-expTaylor(x,tol)

Esta função implementa o método da biseção para aproximar um zero de f
    f <- Função continua f
    a <- Primeiro elemento do intervalo que contêm pelo menos um zero
    b <- Segundo elemento do intervalo que contêm pelo menos um zero
    tol <- Tolerância tol (diferença da raiz real (f(x) = 0) e a raiz obtida menor que tol)
-bisec(f,a,b,tol)

Esta função calcula a soma dos termos da série de potências de x para a função seno
até encontrar encontrar um termo cujo valor absoluto é inferior a uma tolerância tol
    x <- Potências de x (vetor)
    tol <- Tolerância tol = Valor absoluto inferior a tol
-senoTaylor(x, tol)

Esta função usa a fórmula de Lagrange para calcular o valor do polinómio 
de grau não superior a n interpolador no ponto x
    xi <- vetor com os valores dos nós x0,x1,x2
    yi <- vetor com os valores dos nós depois de aplicada a função
    x <- Valor do ponto x
-poLagrange (xi,yi,x)

Arredonda os valores de uam matrix em t algarismos (Não tenho a certeza se faz isto)
    x <- Matriz
    t <- Algarismos significativos desejados
-chop(x, t)

Usa a fórmula de Newton com diferenças divididas
para calcular o valor do polinómio interpolador no ponto z
Usa a função TabDifDiv para calcular as diferenças divididas
    x <- Vetores (nós)
    f <- Valores nodais
    z <-
-polNewton(x,f,z)

Usa a regra composta dos trapezios para aproximar o valor do integral de f
no intervalo [a,b]; divide o intervalo em n subintervalos de igual amplitude
    f <- Função
    a <- Variável menor do intervalo
    b <- Variável maior do intervalo
    n <- Número de subintervalos da mesma amplitude desejados
-trapezios(f,a,b,n)

Usa a regra composta de Simpson para aproximar o valor do integral de f
no intervalo [a,b]; 
divide o intervalo em n subintervalos de igual amplitude; n deve ser par
    f <- Função
    a <- Variável menor do intervalo
    b <- Variável maior do intervalo
    n <- Número de subintervalos da mesma amplitude desejados (tem de ser par)
-simpson(f,a,b,n)

Resolve o sistema Ax=b pelo metodo de eliminaçao de Gauss sem pivotaçao
usa a function STriangular que implementa o metodo de substituicao
inversa para matrizes triangulares superiores;
    b <- Variáveis a que Ax é igualado
    A <- Variável que multiplica x
-GaussElim (A,b)

Resolve o sistema Ax=b pelo método de eliminação de Gauss 
com pivotação parcial(PP); 
    b <- Variáveis a que Ax é igualado
    A <- Variável que multiplica x
-GaussElimPP(A,b)

Esta função mostra o gráfico do polinómio p no intervalo i = [a,b]
    p <- Polinómio
    i <- Intervalo ddesejado para o gráfico
-fplot(p,i)

Esta função faz com que apareca em cima de um grafico passado os pontos que desejamos
-hold on
Esta função marca os pontos no gráfico com o objeto que quisermos
    x <- Abcissas dos pontos (x)
    v <- Valores(Ordenada) dos pontos (y)
    mark <- Marca que aparece no gráfico
-plot(x,values,mark)

Nota: fplot(p,i) seguida de hold on, plot(points,values,mark) mostra um grafico do polinomio p
no intervalo i, com os pontos de abcissas points e ordenada values marcados no grafico com o 
objeto mark
